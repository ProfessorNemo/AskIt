<%# был ли оставлен комментарий для ТЕКУЩЕГО commentable или нет %>
<%# comment: @comment, локальная переменная - comment %>
<% comment_builder = commentable.comments.build %>
<% html_id = dom_id commentable, 'comments' %>
<%# ссылка на id c кнопкой. Устанавливаем далее привязку между кнопкой и блоком tag.div...do%>
<%# конкретная кнопка теперь будет скрывать или показывать конкретный блок div %>
<%= link_to t('questions.show.comments'), "##{html_id}",
  class: 'btn btn-primary', data: {'bs-toggle': 'collapse'} %>
  <%# если комментария нет, то всхлопнутое остается %>
<%= tag.div class: "collapse", id: html_id do %>
  <%= turbo_frame_tag "#{dom_id(commentable)}_#{dom_id(comment_builder)}" do %>
    <% if policy(comment_builder).create? %>
        <%# форму отстраиваем для двух моделей: commentable - в качестве которой может фигурировать
      вопрос или ответ, а дальше если комментарий существует - отсраивать форму для "comment", а
      если его нет - создаем новый образец класса comments, который будет привязан к commentable  %>
      <%= form_with model: [commentable, comment_builder],
      class: 'pt-3 border-top my-2' do |f| %>
        <%= render 'shared/errors', object: comment %>

        <div class="mb-3 row">
          <div class="col-sm-2 col-form-label">
            <%= f.label :body %>
          </div>

          <div class="col-sm-10">
            <%= f.text_area :body, class: 'form-control form-control-sm' %>
          </div>
        </div>

        <%= f.submit t('global.button.submit'), class: 'btn btn-sm btn-primary' %>
      <% end %>
    <% end %>
    <%= turbo_frame_tag dom_id(commentable, 'comments_list') do %>
    <%# вывод всех задекорированных комментариев %>
      <%= render commentable.comments.includes(:user).includes([:commentable]).decorate %>
    <% end %>
  <% end %>
<% end %>